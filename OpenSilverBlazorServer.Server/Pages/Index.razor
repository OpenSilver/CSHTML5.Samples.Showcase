@page "/"
@using OpenSilverBlazorServer.Server.Initializers
@using OpenSilverBlazorServer.Wpf
@using System.Diagnostics

@implements IDisposable

@inject IJSRuntime JSRuntime

<script>
    window.getOSFilesLoadedPromise = (function () {
        const styleheets = ['libs/cshtml5.css', 'libs/quill.core.css'];
        const scripts = ['libs/cshtml5.js', 'libs/ResizeObserver.js', 'libs/quill.min.js', 'libs/html2canvas.js'];

        const _promises = [];
        const _timestamp = '?date=' + new Date().toISOString();

        styleheets.forEach((name) => {
            _promises.push(new Promise((resolve, reject) => {
                const url = name + _timestamp;
                const stylesheet = document.createElement('link');
                stylesheet.setAttribute('rel', 'stylesheet');
                stylesheet.setAttribute('type', 'text/css');
                stylesheet.setAttribute('href', url);
                stylesheet.onload = function () { resolve(url); }
                stylesheet.onerror = function () {
                    console.error('Failed to load ' + name);
                    reject(url);
                }
                document.getElementsByTagName('head')[0].appendChild(stylesheet);
            }));
        });

        scripts.forEach((name) => {
            _promises.push(new Promise((resolve, reject) => {
                const url = name + _timestamp;
                const script = document.createElement('script');
                script.setAttribute('type', 'application/javascript');
                script.setAttribute('src', url);
                script.onload = function () { resolve(url); };
                script.onerror = function () {
                    console.error('Failed to load ' + name);
                    reject(url);
                };
                document.getElementsByTagName('head')[0].appendChild(script);
            }));
        });

        return async function () {
            try {
                await Promise.all(_promises);
                return true;
            } catch (error) {
                return false;
            }
        };
    })();

    window.onCallBack = (function () {
        const opensilver = "OpenSilverBlazorServer.Server";
        const opensilver_js_callback = "OnCallbackFromJavaScriptBlazorServer";
        const opensilver_js_error_callback = "OnCallbackFromJavaScriptError";

        function prepareCallbackArgs(args) {
            let callbackArgs;
            switch (typeof args) {
                case 'number':
                case 'string':
                case 'boolean':
                    callbackArgs = args;
                    break;
                case 'object':
                    // if we deal with an array, we need to check
                    // that all the items are primitive types.
                    if (Array.isArray(args)) {
                        callbackArgs = [];
                        for (let i = 0; i < args.length; i++) {
                            let itemType = typeof args[i];
                            if ((args[i] === null || itemType === 'number' || itemType === 'string' || itemType === 'boolean' ||
                                // Check for TypedArray. This is used for reading binary data for FileReader for example
                                (ArrayBuffer.isView(args[i]) && !(args[i] instanceof DataView))
                            )) {
                                callbackArgs.push(args[i]);
                            } else {
                                callbackArgs.push(undefined);
                            }
                        }
                        break;
                    }
                // if args === null, fall to next case.
                case 'undefined':
                default:
                    callbackArgs = [];
                    break;
            }

            return callbackArgs;
        }

        return {
            OnCallbackFromJavaScript: function (callbackId, idWhereCallbackArgsAreStored, callbackArgsObject, returnValue) {
                let formattedArgs = prepareCallbackArgs(callbackArgsObject);
                const res = DotNet.invokeMethodAsync(opensilver, opensilver_js_callback, callbackId, idWhereCallbackArgsAreStored, formattedArgs, returnValue || false);
                if (returnValue) {
                    return res;
                }
            },

            OnCallbackFromJavaScriptError: function (idWhereCallbackArgsAreStored) {
                //DotNet.invokeMethod(opensilver, opensilver_js_error_callback, idWhereCallbackArgsAreStored);
            }
        };
    })();

    function executeJs(js) {
        //console.log('Executing js:');
        //console.log(js);
        var result = eval(js);
        var resultType = typeof result;
        if (resultType == 'string' || resultType == 'number' || resultType == 'boolean') {
            return result;
        }
        else if (result == null) {
            return null;
        } else {
            return " [NOT USABLE DIRECTLY IN C#] (" + resultType + ")";
        }
        return result;
    }
</script>

<div id="app">
    <!--
        <div class="loading-indicator-wrapper">
            <div class="loading-indicator">
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-ball"></div>
                <div class="loading-indicator-text"></div>
            </div>
        </div>
        -->
</div>
<div id="opensilver-root" style="position: relative; width: 100vw; height: 100vh; overflow-x: hidden; overflow-y: hidden;"></div>

@code {
    private DispatcherWrapper? _openSilverDispatcher = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            new JavaScriptExecutionInitializer(JSRuntime, InvokeAsync, () => _openSilverDispatcher).Initialize();

            var openSilverRuntimeThread = new Thread(() =>
            {
                try
                {
                    _openSilverDispatcher = new DispatcherWrapper();

                    _openSilverDispatcher.BeginInvoke(() =>
                    {
                        var app = new OpenSilver.Samples.Showcase.App();
                    });
                    _openSilverDispatcher.Run();
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Exception happened in Main. Exception: {ex}.");
                }
            });
            openSilverRuntimeThread.SetApartmentState(ApartmentState.STA);
            openSilverRuntimeThread.Start();
        }
    }

    public void Dispose()
    {
        _openSilverDispatcher?.BeginInvokeShutdown();
    }
}